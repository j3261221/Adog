class Range extends React.Component {
  constructor(props) {
    super(props);
    this.updateRange = this.updateRange.bind(this);
  }
  
  updateRange(e) {
    this.props.updateRange(e.target.value);
  }
  
  render() {
    // console.log(this.props);
    const { range } = this.props;
    return (
      <div>
        <input id="range" type="range"
          value={range}
          min="0"
          max="20"
          step="1"
          onChange={this.updateRange}
        />
        <span id="output">{range}</span>
      </div>
    )
  }
}

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      rangeVal: 0
    }
    this.updateRange = this.updateRange.bind(this);
  }
  
  updateRange(val) {
    this.setState({
      rangeVal: val
    })
  } 
  
  render() {
    const { rangeVal } = this.state;
    return (
      <Range range={rangeVal} updateRange={this.updateRange}/>
    )
  }  
}

const root = document.getElementById('root');
ReactDOM.render(<App />, root);


$primary: lightblue;

div {
  display: flex;
  align-items: center;
  padding: 5px;
  #output {
    background: $primary;
    color: #fff;
    border-radius: 2px;
    padding: 3px 7px;
    margin: 0px 10px;
    text-align: center;
    position: relative;
    &::before {
      content: '';
      position: absolute;
      left: -12px;
      top: 50%;
      transform: translateY(-50%);
      height: 0;
      width: 0;
      border: solid 6px $primary;
      z-index: -1;
      border-top-color: white;
      border-bottom-color: white;
      border-left-color: white;
    }
  }
}

/* CHROME */
#range {
  -webkit-appearance: none;
  outline: none;
  background: $primary;
  height: 6px;
  width: 200px;
  border-radius: 5px;
  &::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 18px;
    height: 18px;
    border-radius: 50%;
    background: $primary;
  }
}
